properties([
    parameters([
        choice(
            choices: ['ubuntu-1804', 'ubuntu-1604', 'centos-7', 'centos-6'], 
            description: 'Operating System', 
            name: 'OS'),
        string(
            defaultValue: '',
            description: 'Spack version to be used. Empty string means `latest`', 
            name: 'SPACK_VERSION', 
            trim: true)
    ])
])


pipeline {
    environment {
        jenkinsSpackBuilder = 'jenkins_spack_builder'
        platformsToBuild = 'linux/amd64,linux/arm64,linux/ppc64le'
    }
    agent any

    stages {

        stage('CleanWorkspace') {
            steps {
                deleteDir()
            }
        }

        stage('Clone') {
            // get SeisSol-AID repository
            environment {
                TRIMMED_BRANCH = sh(script:'echo ${GIT_BRANCH##origin/}', returnStdout: true).trim()
            }
            steps {
                git branch: "${env.TRIMMED_BRANCH}", url: "${GIT_URL}"
            }
        }

        stage('BuildSpackBaseImage') {
            environment { 
                SPACK_DIR = 'custom-spack'
                SPACK_PATCH_FILE = 'spack-cross-build.patch'
            }
            steps {
                script {
                    dir("deployment/spack-base-image") {
                        dir("${SPACK_DIR}") {
                            // download spack, adjust version and apply a patch
                            sh """
                                git clone https://github.com/spack/spack.git .
                                if [ ! -z \"${params.SPACK_VERSION}\" ]; then
                                    git checkout tags/v${params.SPACK_VERSION}
                                fi
                                git am ../patches/${SPACK_PATCH_FILE}
                            """                      

                            // make sure that a system has a docker-builder which can target our platforms
                            def jenkinSpackStatus = sh (script: "docker buildx inspect ${env.jenkinsSpackBuilder}", returnStatus: true)
                            if (jenkinSpackStatus != 0) {
                                sh """
                                    docker buildx create --name ${env.jenkinsSpackBuilder} --platform ${env.platformsToBuild}
                                """
                            }

                            // spin docker builder 
                            sh """
                                docker buildx use ${env.jenkinsSpackBuilder}
                                docker buildx inspect --bootstrap
                            """

                            // build an push images
                            withCredentials([usernamePassword(credentialsId: 'docker-hub', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                                def image_name = "${USERNAME}/spack-${params.OS}"
                                def image_tag = ""
                                def latest_tag = ""
                                if (params.SPACK_VERSION.isAllWhitespace()) {
                                    latest_tag = "-t ${image_name}:latest"
                                }
                                else {
                                    image_tag = "-t ${image_name}:${params.SPACK_VERSION}"
                                    // latest_tag stays empty on purpose
                                }
                                def path = "./share/spack/docker"
                                sh """
                                    docker login -u ${USERNAME} -p ${PASSWORD}
                                    docker buildx build ${image_tag} ${latest_tag} --platform ${env.platformsToBuild} --no-cache -f ${path}/${params.OS}.dockerfile . --push
                                """
                            }
                        }
                    }
                }
            }
        }
    }
}