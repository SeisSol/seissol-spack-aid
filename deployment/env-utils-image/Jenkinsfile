def gv


properties([
    parameters([
        choice(
            choices: ['ubuntu-1804'], 
            description: 'Operating System', 
            name: 'OS'),
        string(
            defaultValue: '',
            description: 'Spack version to be used (denoted as image tag). Latest will be used if the field is empty', 
            name: 'SPACK_VERSION', 
            trim: true),
        choice(
            choices: ['amd64', 'arm64', 'ppc64le'], 
            description: 'Architecture family', 
            name: 'ARCH_FAMILY'),
        string(
            defaultValue: '',
            description: 'Specific architecture for arch. family. The most generic image will be built if the field is empty', 
            name: 'ARCH', 
            trim: true),
        string(
            defaultValue: 'gcc@8.3.0', 
            description: 'Target compiler suite which is going to be used for building packages. Use Spack syntax', 
            name: 'TARGET_COMPILER', 
            trim: true),
        string(
            defaultValue: 'openmpi@3.1.5+cuda', 
            description: 'Target MPI. Provide a vendor and constrains with Spack syntax', 
            name: 'TARGET_MPI', 
            trim: true),
        string(
            defaultValue: 'cuda@10.1.243', 
            description: 'Target GPU API/libs. Provide a version and constrains with Spack syntax', 
            name: 'TARGET_GPU',
            trim: true),
        string(
            defaultValue: '~/.seissol-aid', 
            description: 'Pass to the cache directory', 
            name: 'CACHE_DIR', 
            trim: true),
        booleanParam(
            defaultValue: false, 
            description: 'build singularity image and push it to sylabs cloud', 
            name: 'SINGULARITY_PUSH'),
        booleanParam(
            defaultValue: false, 
            description: 'force docker to build images without using caching', 
            name: 'FORCED_BUILD'),
        string(
            defaultValue: 'master', 
            description: 'agent name which tells where to run a job', 
            name: 'AGENT',
            trim: true)
    ])
])


pipeline {
    agent {label "${params.AGENT}"}

    stages {
        stage('CleanWorkspace') {
            steps {
                deleteDir()
            }
        }


        stage('Clone') {
            environment {
                TRIMMED_BRANCH = sh(script:'echo ${GIT_BRANCH##origin/}', returnStdout: true).trim()
            }
            steps {
                git branch: "${env.TRIMMED_BRANCH}", url: "${GIT_URL}"
                sh 'mkdir deployment/env-utils-image/build'   
            }
        }


        stage('Init') {
            steps {
                dir("deployment/env-utils-image") {
                    script {
                        gv = load "./scripts/aux.groovy"
                    }
                }
            }
        }


        stage('RefineInputeParams') {
            steps {
                script {
                    dockerhubAccount = "unknown"
                    withCredentials([usernamePassword(credentialsId: 'docker-hub', 
                                                      usernameVariable: 'USERNAME', 
                                                      passwordVariable: 'PASSWORD')]) {
                        dockerhubAccount = "${USERNAME}"
                    }

                    spackBaseImageName = dockerhubAccount + "/spack-${params.OS}"
                    if (params.SPACK_VERSION.isAllWhitespace()) {
                        spackBaseImageName += ":latest" 
                    }
                    else {
                        spackBaseImageName += ":${params.SPACK_VERSION}"
                    }

                    imagePrefix = "${params.ARCH_FAMILY}"
                    builderImageName = dockerhubAccount + "/spack_custom_builder_${imagePrefix}:"
                    builderImageName += gv.generateBuilderTag(params.OS, params.TARGET_COMPILER).trim()


                    resImagePrefix = gv.generateImageFileTag(params.OS,
                                                             params.TARGET_COMPILER,
                                                             params.TARGET_MPI, 
                                                             params.TARGET_GPU,
                                                             params.ARCH_FAMILY,
                                                             params.ARCH).trim()

                    resBaseImageName = "seissol_base_${imagePrefix}"
                    resSingularityImage = resBaseImageName + ".sif"
                    resSingularityPushName = resSingularityImage + ":" + resImagePrefix
                    resDockerImageName = dockerhubAccount + "/" + resBaseImageName + ":" + resImagePrefix
                    
                    resBaseImageFile = "seissol_base_${imagePrefix}_" + resImagePrefix
                    resSingularityDefinitionFile = resBaseImageFile + ".def"
                    resDockerImageFile = resBaseImageFile + ".dockerfile"

                    extraDockerCommands = ''
                    if (params.FORCED_BUILD) {
                        extraDockerCommands += '--no-cache'
                    }

                    cacheSubDir = "${params.CACHE_DIR}/${params.ARCH_FAMILY}"
                    sh "mkdir -p ${cacheSubDir} && rm -rf ${cacheSubDir}/*"
                }
            }
        }
        

        stage('GenerateCustomSpack') {
            steps{
                dir("deployment/env-utils-image") {               
                    sh """
                    python3 ./scripts/concretize_builder.py --compiler ${params.TARGET_COMPILER} \
                                                            --spack_base_image ${spackBaseImageName} \
                                                            --arch_family ${params.ARCH_FAMILY} \
                                                            --input_dir ./templates \
                                                            --output_dir  ./build
                    cp ./build/custom-spack-${params.ARCH_FAMILY}.dockerfile ${cacheSubDir}
                    """
                }
            }
        }


        stage('BuildCustomSpack') {
            steps {
                script {
                    imagePath = "./deployment/env-utils-image/build/custom-spack-${ARCH_FAMILY}.dockerfile"
                    withCredentials([usernamePassword(credentialsId: 'docker-hub', 
                                                      usernameVariable: 'USERNAME', 
                                                      passwordVariable: 'PASSWORD')]) {
                        sh """
                        docker login -u ${USERNAME} -p ${PASSWORD}
                        docker buildx build ${extraDockerCommands} \
                                            -t ${builderImageName} \
                                            --platform linux/${params.ARCH_FAMILY} \
                                            --file ${imagePath} . --push
                        """
                    }
                }
            }
        }


        stage('GenerateSeisSolEnv') {
            steps {
                script {
                    dir("deployment/env-utils-image") {
                        sh """
                        python3 ./scripts/concretize_spack_spec.py \
                                     --compiler ${params.TARGET_COMPILER} \
                                     --mpi \"${params.TARGET_MPI}\" \
                                     --gpu ${params.TARGET_GPU} \
                                     --builder_image ${builderImageName} \
                                     --target_image ${params.OS} \
                                     --arch_family ${params.ARCH_FAMILY} \
                                     --arch ${params.ARCH} \
                                     --input_dir ./templates \
                                     --output_dir  ./build
                        cp ./build/spack.yaml ${cacheSubDir}
                        """
                        withCredentials([usernamePassword(credentialsId: 'docker-hub', 
                                        usernameVariable: 'USERNAME', 
                                        passwordVariable: 'PASSWORD')]) {
                            dir('./build') {
                                sh """
                                docker run --rm -v \$(pwd):/workspace -w /workspace ${builderImageName} containerize > ${resDockerImageFile}
                                cp ./${resDockerImageFile} ${cacheSubDir}
                                """
                            }
                        }
                    }
                }
            }
        }

        
        stage('BuildSeisSolEnv') {
            steps{
                script {
                    dir("deployment/env-utils-image/build") {
                        withCredentials([usernamePassword(credentialsId: 'docker-hub', 
                                                          usernameVariable: 'USERNAME', 
                                                          passwordVariable: 'PASSWORD')]) {
                        sh """
                        docker login -u ${USERNAME} -p ${PASSWORD}
                        docker buildx build ${extraDockerCommands} \
                                            -t ${resDockerImageName} \
                                            --platform linux/${params.ARCH_FAMILY} \
                                            --file ${resDockerImageFile} . --push
                        """

                        }
                    }
                }
            }
        }


        stage('GenerateSingularityDefFile') {
            steps{
                script {
                    dir("deployment/env-utils-image/build") {
                        sh """
                           (echo "Bootstrap: docker" \
                            && echo "From: ${resDockerImageName}" \
                            && echo "Stage: final" \
                            && echo "" \
                            && echo "%post" \
                            && echo "    rm /etc/profile.d/*spack*.sh" \
                            && echo "    cat /opt/spack-environment/seissol_env.sh >> \\\$SINGULARITY_ENVIRONMENT" \
                            && echo "    cat /opt/spack-environment/cuda_env.sh >> \\\$SINGULARITY_ENVIRONMENT" \
                            && echo "") > ${resSingularityDefinitionFile}
            
                            cp ./${resSingularityDefinitionFile} ${cacheSubDir}
                        """
                    }
                }
            }
        }


        stage('PushToSingularity') {
            when {
                expression {
                    params.SINGULARITY_PUSH
                }
            }
            steps {
                script {
                    dir("deployment/env-utils-image/build") {
                        withCredentials([usernamePassword(credentialsId: "${env.NODE_NAME}_id", 
                                                        usernameVariable: 'USERNAME', 
                                                        passwordVariable: 'PASSWORD')]) {
                            sh """
                            echo ${PASSWORD} | sudo -S -E singularity build ./${resSingularityImage} ./${resSingularityDefinitionFile}
                            cp ./${resSingularityImage} ${cacheSubDir} 
                            """
                        }

                        withCredentials([usernamePassword(credentialsId: 'singularity-user', 
                                                        usernameVariable: 'USERNAME', 
                                                        passwordVariable: 'PASSWORD')]) {
                            deleteStatus = sh (script: "singularity delete -F library://${USERNAME}/collection/${resSingularityPushName}", 
                                               returnStatus: true)
                            key = sh (script: "singularity key list | grep $USERNAME | grep -oP \"^\\d+\"",
                                      returnStatus: true)
                            sh """
                            echo "${PASSWORD}" | singularity sign -k ${key} ./${resSingularityImage}
                            singularity push ./${resSingularityImage} library://${USERNAME}/collection/${resSingularityPushName}
                            """
                        }
                    }
                }
            }
        }


        stage('RecordMetaData') {
            steps {
                script {
                    machineConfig = sh(script: "uname -a", returnStdout: true).trim()
                    dockerVersion = sh(script: "docker --version", returnStdout: true).trim()
                    buildxVersion = sh(script: "docker buildx version", returnStdout: true).trim()
                    singularityVersion = sh(script: "singularity --version", returnStdout: true).trim()
                    spackVersion = sh(script: "docker run --rm ${builderImageName} --version", returnStdout: true).trim()
                    sh """
                        (echo "config: ${machineConfig}" \
                        && echo "${dockerVersion}" \
                        && echo "${buildxVersion}" \
                        && echo "${singularityVersion}" \
                        && echo "spack: ${spackVersion}" \
                        && echo "") > ${cacheSubDir}/metadata
                    """
                }
            }
        }
    }


    post { 
        always {
            sh 'echo "end..."'
        }
    }
}
